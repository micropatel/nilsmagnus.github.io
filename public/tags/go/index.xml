<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Random codewalks</title>
    <link>/tags/go/</link>
    <description>Recent content in go on Random codewalks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Nov 2018 20:43:58 +0100</lastBuildDate>
    
	<atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nillability and zero-values in go</title>
      <link>/post/nillability-in-go/</link>
      <pubDate>Tue, 06 Nov 2018 20:43:58 +0100</pubDate>
      
      <guid>/post/nillability-in-go/</guid>
      <description>Beeing a long time java-developer, I am obsessed with null-checking and handling null values. In golang, the story is somewhat different. In this post I will try to describe how nil and zero-values are used in golang.
non-nillable and nillable types Types can be either nillable or non-nillable in go. The non-nillable types can never be nil and will never cause you a nil-panic (the java equivalent of nullpointerexception) But when are dealing with the nillable types, we have to take a bit of caution although not as much as in java(or other languages with nillable types).</description>
    </item>
    
    <item>
      <title>Write go like a pro</title>
      <link>/post/write-go-like-a-pro/</link>
      <pubDate>Mon, 24 Sep 2018 18:45:58 +0100</pubDate>
      
      <guid>/post/write-go-like-a-pro/</guid>
      <description>So you enjoy go and are ready to take your go-application to production standards. Here is a listing of some tricks on how to get your application production-ready. Not all these advices will apply to all kinds of applications, pick and choose whatever makes sense to your application.
Use Make to build and test your app Heavy-weight applications written in heavyweigh JVM languages has gradle/maven/ant/sbt/leiningen. Javascriptish languages has npm/yarn/hotoftheday. For go, you should lean on a rock-solid lightweight tool like Make, to build and test your app.</description>
    </item>
    
    <item>
      <title>Using griblib for Meteorology</title>
      <link>/post/grib2-adventures/</link>
      <pubDate>Fri, 23 Feb 2018 11:09:58 +0100</pubDate>
      
      <guid>/post/grib2-adventures/</guid>
      <description>Griblib is a library written in go to read grib2 files and do some filtering on the content. This post describes some details about how griblib is built and intended usage.
GRIB2: a binary format for meteorology GRIB: G eneral R egularly-distributed I nformation in B inary form
Grib2 is a binary file-format used to store forecasts and historical data. The content can be meteorological, space-weather, sea-conditions etc. In this post I will only focus on meteorological data.</description>
    </item>
    
    <item>
      <title>Using your tensorflow model with go</title>
      <link>/post/go-tensorflow/</link>
      <pubDate>Mon, 03 Jul 2017 15:45:58 +0100</pubDate>
      
      <guid>/post/go-tensorflow/</guid>
      <description>This post will serve as a simple end-to-end example of how to use your own tensorflow-model to do inference in your go-application. You will need to train your own model with tensorflow in order to make it work properly.
If you are doing inference in java (or any other language) the blogpost will still be useful since the principles are the same for languages with bindings to tensorflow.
TLDR; Name your tensors and operations in the tensorflow graph before exporting the model.</description>
    </item>
    
  </channel>
</rss>